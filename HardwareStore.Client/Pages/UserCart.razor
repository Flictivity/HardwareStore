@page "/cart/{UserId:long}"
@using HardwareStore.Domain.Models
@using HardwareStore.Domain.Services
@using HardwareStore.Client.Data

@inject IUserProductsService UserProductsService;
@inject ISnackbar Snackbar;
@inject NavigationManager NavigationManager;

@if (AppState.AuthorizedUser is null)
{
    <h1>Недостаточно прав</h1>
}

<MudGrid Spacing="1" Class="d-flex" Justify="Justify.SpaceAround">
    @foreach (Product? product in _products)
    {
        if (product is null)
        {
            <MudItem>
                <MudText>Удаленный товар</MudText>
            </MudItem>
            continue;
        }
        <MudItem xs="12" md="9" lg="12">
            <MudPaper Class="pa-5 d-flex justify-start align-center">
                <MudContainer Class="d-flex align-center justify-space-around">
                    @if (product.Images.Count == 0)
                    {
                        <MudImage Class="mr-5" Height="200" Width="200">
                            <MudSkeleton Animation="Animation.Pulse" SkeletonType="SkeletonType.Circle" Height="200px" Width="200"/>
                        </MudImage>
                    }
                    @foreach (var image in product.Images.Take(1))
                    {
                        var base64ImageString = Convert.ToBase64String(image.Source);
                        var convertedSource = $"data:image;base64,{base64ImageString}";
                        <MudImage Style="width: 35%; height: 35%; min-height: 100px; min-width: 100px" Src="@convertedSource" Class="mr-5"/>
                    }
                    <MudHidden Breakpoint="Breakpoint.Xs">
                        <MudStack Class="d-flex flex-column pa-0" Spacing="2">
                            <MudText Color="Color.Info" Align="Align.Start" Class="d-flex">
                                <b>Характеристики:</b>
                            </MudText>
                            @foreach (Characteristic characteristic in product.Characteristics.Take(4))
                            {
                                <MudText>
                                    <b>@characteristic.Name: </b>@characteristic.Value
                                </MudText>
                            }
                        </MudStack>
                    </MudHidden>
                    <MudContainer Class="d-flex flex-column justify-space-between pl-5">
                        <MudText Align="Align.Start" Color="Color.Info">
                            <b>Название категории</b>
                        </MudText>
                        <MudText Align="Align.Start" Class="mt-1 mb-2"><b>Наименование:</b> @product.Name</MudText>
                        <MudText Align="Align.Start" Class="mb-2">Код: @product.Code</MudText>
                        <MudStack Row="true" Spacing="1" Class="mb-5">
                            <MudText Color="Color.Secondary">
                                <b>Стоимость:</b>
                            </MudText>
                            <MudText>
                                @product.Cost
                            </MudText>
                        </MudStack>
                        <MudStack Row="true">
                            <MudTooltip Text="Удалить">
                                <MudFab OnClick="async () => await DeleteFromCart(product.Id)" Color="Color.Success" Icon="@Icons.Material.Filled.Delete"/>
                            </MudTooltip>
                            <MudTooltip Text="В избранное">
                                <MudFab OnClick="async () => await AddToFavorite(product)" Color="Color.Error" Icon="@Icons.Material.Filled.Favorite"/>
                            </MudTooltip>
                            <MudTooltip Text="Подробнее">
                                <MudFab OnClick="() => OpenProductPage(product.Id)" Color="Color.Primary" Icon="@Icons.Material.Filled.MoreHoriz"/>
                            </MudTooltip>
                        </MudStack>
                    </MudContainer>
                </MudContainer>
            </MudPaper>
        </MudItem>
    }
</MudGrid>


@code {
    [Parameter]
    public long UserId { get; set; }

    private List<Product?> _products = new();

    protected override async Task OnInitializedAsync()
    {
        if (AppState.AuthorizedUser is null)
            return;
        
        _products = (await UserProductsService.GetUserCartProducts(AppState.AuthorizedUser.Id)).ToList();
        await base.OnInitializedAsync();
    }
    
    private void OpenProductPage(long id)
    {
        NavigationManager.NavigateTo($"/product/{id}");
    }

    private async Task DeleteFromCart(long id)
    {
        if(AppState.AuthorizedUser is null)
            return;
        var res = await UserProductsService.DeleteFromCart(id, AppState.AuthorizedUser.Id);
        if (res.Success)
        {
            Snackbar.Add("Успешно", Severity.Success);
            _products = (await UserProductsService.GetUserCartProducts(AppState.AuthorizedUser.Id)).ToList();
            StateHasChanged();
            return;
        }
        Snackbar.Add("Произошла ошибка", Severity.Error);
    }
    
    private async Task AddToFavorite(Product? product)
    {
        if (AppState.AuthorizedUser is null)
        {
            Snackbar.Add("Для добавления товара в избранное, необходимо авторизироваться", Severity.Error);
            return;
        }
        if (product is null)
            return;
        var res = await UserProductsService.AddToFavoriteAsync(product.Id,AppState.AuthorizedUser.Id);
        if (res.Success)
        {
            Snackbar.Add($"Товар {product.Name} успешно добавлен в избранное", Severity.Success);
            return;
        }
        Snackbar.Add(res.Message, Severity.Info);
    }
}