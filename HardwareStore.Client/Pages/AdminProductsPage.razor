@page "/admin_products"
@using HardwareStore.Domain.Models
@using HardwareStore.Client.ValidationErrorMessages
@using HardwareStore.Domain.Services

@inject NavigationManager NavigationManager;
@inject IProductService ProductService;

<MudGrid Spacing="1" Class="d-flex" Justify="Justify.SpaceAround">
    @foreach (Product product in _products)
    {
        <MudItem xs="12" md="9" lg="6">
            <MudPaper Class="pa-5 d-flex justify-start align-center">
                <MudContainer Class="d-flex align-center justify-space-around">
                    @if (product.Images.Count == 0)
                    {
                        <MudImage Class="mr-5" Height="200" Width="200">
                            <MudSkeleton Animation="Animation.Pulse" SkeletonType="SkeletonType.Circle" Height="200px" Width="200"/>
                        </MudImage>
                    }
                    @foreach (var image in product.Images.Take(1))
                    {
                        var base64ImageString = Convert.ToBase64String(image.Source);
                        var convertedSource = $"data:image;base64,{base64ImageString}";
                        <MudImage Style="width: 35%; height: 35%; min-height: 100px; min-width: 100px" Src="@convertedSource" Class="mr-5"/>
                    }
                    <MudHidden Breakpoint="Breakpoint.Xs">
                        <MudStack Class="d-flex flex-column pa-0" Spacing="2">
                            <MudText Color="Color.Info" Align="Align.Start" Class="d-flex">
                                <b>Характеристики:</b>
                            </MudText>
                            @foreach (Characteristic characteristic in product.Characteristics.Take(4))
                            {
                                <MudText>
                                    <b>@characteristic.Name: </b>@characteristic.Value
                                </MudText>
                            }
                        </MudStack>
                    </MudHidden>
                    <MudContainer Class="d-flex flex-column justify-space-between pl-5">
                        <MudText Align="Align.Start" Color="Color.Info">
                            <b>Название категории</b>
                        </MudText>
                        <MudText Align="Align.Start" Class="mt-1 mb-2"><b>Наименование:</b> @product.Name</MudText>
                        <MudText Align="Align.Start" Class="mb-2">Код: @product.Code</MudText>
                        <MudStack Row="true" Spacing="1" Class="mb-5">
                            <MudText Color="Color.Secondary">
                                <b>Стоимость:</b>
                            </MudText>
                            <MudText>
                                @product.Cost
                            </MudText>
                        </MudStack>
                        <MudStack Row="true">
                            <MudButton Class="mt-7" Variant="Variant.Filled" Color="Color.Primary" OnClick="() => OpenProductPage(product.Id)">Изменить</MudButton>
                            <MudButton Class="mt-7" Variant="Variant.Filled" Color="Color.Error">Удалить</MudButton>
                        </MudStack>
                    </MudContainer>
                </MudContainer>
            </MudPaper>
        </MudItem>
    }
</MudGrid>
<MudFab Style="position: fixed; bottom: 0; right: 0; margin: 35px 25px;" Color="Color.Primary"
        Icon="@Icons.Material.Filled.Add" OnClick="() => OpenProductPage(0)"/>
@code {
    private List<Product> _products = new();

    protected override async Task OnInitializedAsync()
    {
        _products = (await ProductService.GetProducts()).ToList();
        await base.OnInitializedAsync();
    }

    private void OpenProductPage(long id)
    {
        NavigationManager.NavigateTo($"/admin_product/{id}");
    }
}