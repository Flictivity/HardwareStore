@using HardwareStore.Client.ValidationErrorMessages
@using HardwareStore.Domain.Models
@using HardwareStore.Domain.Services
@using HardwareStore.Client.Data.Credentials

@inject ICategoryService CategoryService;
@inject ISnackbar Snackbar;

<MudForm @bind-IsValid="_success">
    <MudDialog DefaultFocus="DefaultFocus.LastChild">
        <DialogContent>
            <MudTextField Required="true" T="string" @bind-Value="_model.Name"
                          RequiredError="@RequiredErrorMessages.DefaultRequiredError" Label="Имя" InputType="InputType.Text"
                          Class="mb-3"/>
            <MudSelect T="MainCategory" @bind-Value="_model.MainCategory" ToStringFunc="@_converter" Label="Категория"
                       Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter">
                @foreach (MainCategory mainCategory in _mainCategories)
                {
                    <MudSelectItem Value="mainCategory"/>
                }
            </MudSelect>
        </DialogContent>
        <DialogActions>
            <MudButton Class="mx-auto" Variant="Variant.Filled" Color="Color.Secondary" OnClick="Cancel">Отмена</MudButton>
            <MudButton Class="mx-auto" Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit" Disabled="@(!_success)">Сохранить</MudButton>
        </DialogActions>
    </MudDialog>
</MudForm>

@code {

    [Parameter]
    public string? SelectedCategoryName { get; set; }

    [Parameter]
    public Category? SelectedCategory { get; set; }

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = null!;

    private CategoryCredentials _model = new();
    private bool _isEditing;
    private bool _success;

    private List<MainCategory> _mainCategories = new();

    private readonly Func<MainCategory?, string?> _converter = p => p?.Name;

    protected override async Task OnInitializedAsync()
    {
        if (SelectedCategoryName is not null)
        {
            _isEditing = true;
            _model.Name = SelectedCategoryName;
            _model.MainCategory = SelectedCategory!.MainCategory;
        }
        _mainCategories = (await CategoryService.GetMainCategoriesAsync()).ToList();
        await base.OnInitializedAsync();
    }

    private async Task Submit()
    {
        if (_isEditing)
        {
            await CategoryService.UpdateCategoryAsync(SelectedCategory!, _model.Name, _model.MainCategory);
            Snackbar.Add("Успешно", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
            return;
        }

        var res = await CategoryService.CreateCategoryAsync(_model.Name, _model.MainCategory);

        if (res.Success)
        {
            Snackbar.Add("Успешно", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        Snackbar.Add(res.Message, Severity.Error);
    }

    private void Cancel() => MudDialog.Cancel();
}